	"tbf": {
		"language": 6541
	},
	"tbg": {
		"language": 6542
	},
	"tbh": {
		"language": 6543
	},
	"tbi": {
		"language": 6544
	},
	"tbj": {
		"language": 6545
	},
	"tbk": {
		"language": 6546
	},
	"tbl": {
		"language": 6547
	},
	"tbm": {
		"language": 6548
	},
	"tbn": {
		"language": 6549
	},
	"tbo": {
		"language": 6550
	},
	"tbp": {
		"language": 6551
	},
	"tbq": {
		"language": 6552
	},
	"tbr": {
		"language": 6553
	},
	"tbs": {
		"language": 6554
	},
	"tbt": {
		"language": 6555
	},
	"tbu": {
		"language": 6556
	},
	"tbv": {
		"language": 6557
	},
	"tbw": {
		"language": 6558
	},
	"tbx": {
		"language": 6559
	},
	"tby": {
		"language": 6560
	},
	"tbz": {
		"language": 6561
	},
	"tca": {
		"language": 6562
	},
	"tcb": {
		"language": 6563
	},
	"tcc": {
		"language": 6564
	},
	"tcd": {
		"language": 6565
	},
	"tce": {
		"language": 6566
	},
	"tcf": {
		"language": 6567
	},
	"tcg": {
		"language": 6568
	},
	"tch": {
		"language": 6569
	},
	"tci": {
		"language": 6570
	},
	"tck": {
		"language": 6571
	},
	"tcl": {
		"language": 6572
	},
	"tcm": {
		"language": 6573
	},
	"tcn": {
		"language": 6574
	},
	"tco": {
		"language": 6575
	},
	"tcp": {
		"language": 6576
	},
	"tcq": {
		"language": 6577
	},
	"tcs": {
		"language": 6578
	},
	"tct": {
		"language": 6579
	},
	"tcu": {
		"language": 6580
	},
	"tcw": {
		"language": 6581
	},
	"tcx": {
		"language": 6582
	},
	"tcy": {
		"language": 6583
	},
	"tcz": {
		"language": 6584
	},
	"tda": {
		"language": 6585
	},
	"tdb": {
		"language": 6586
	},
	"tdc": {
		"language": 6587
	},
	"tdd": {
		"language": 6588
	},
	"tde": {
		"language": 6589
	},
	"tdf": {
		"language": 6590
	},
	"tdg": {
		"language": 6591
	},
	"tdh": {
		"language": 6592
	},
	"tdi": {
		"language": 6593
	},
	"tdj": {
		"language": 6594
	},
	"tdk": {
		"language": 6595
	},
	"tdl": {
		"language": 6596
	},
	"tdm": {
		"language": 6597
	},
	"tdn": {
		"language": 6598
	},
	"tdo": {
		"language": 6599
	},
	"tdq": {
		"language": 6600
	},
	"tdr": {
		"language": 6601
	},
	"tds": {
		"language": 6602
	},
	"tdt": {
		"language": 6603
	},
	"tdu": {
		"language": 6604
	},
	"tdv": {
		"language": 6605
	},
	"tdx": {
		"language": 6606
	},
	"tdy": {
		"language": 6607
	},
	"tea": {
		"language": 6608
	},
	"teb": {
		"language": 6609
	},
	"tec": {
		"language": 6610
	},
	"ted": {
		"language": 6611
	},
	"tee": {
		"language": 6612
	},
	"tef": {
		"language": 6613
	},
	"teg": {
		"language": 6614
	},
	"teh": {
		"language": 6615
	},
	"tei": {
		"language": 6616
	},
	"tek": {
		"language": 6617
	},
	"tem": {
		"language": 6618
	},
	"ten": {
		"language": 6619
	},
	"teo": {
		"language": 6620
	},
	"tep": {
		"language": 6621
	},
	"teq": {
		"language": 6622
	},
	"ter": {
		"language": 6623
	},
	"tes": {
		"language": 6624
	},
	"tet": {
		"language": 6625
	},
	"teu": {
		"language": 6626
	},
	"tev": {
		"language": 6627
	},
	"tew": {
		"language": 6628
	},
	"tex": {
		"language": 6629
	},
	"tey": {
		"language": 6630
	},
	"tez": {
		"language": 6631
	},
	"tfi": {
		"language": 6632
	},
	"tfn": {
		"language": 6633
	},
	"tfo": {
		"language": 6634
	},
	"tfr": {
		"language": 6635
	},
	"tft": {
		"language": 6636
	},
	"tga": {
		"language": 6637
	},
	"tgb": {
		"language": 6638
	},
	"tgc": {
		"language": 6639
	},
	"tgd": {
		"language": 6640
	},
	"tge": {
		"language": 6641
	},
	"tgf": {
		"language": 6642
	},
	"tgg": {
		"language": 6643
	},
	"tgh": {
		"language": 6644
	},
	"tgi": {
		"language": 6645
	},
	"tgj": {
		"language": 6646
	},
	"tgn": {
		"language": 6647
	},
	"tgo": {
		"language": 6648
	},
	"tgp": {
		"language": 6649
	},
	"tgq": {
		"language": 6650
	},
	"tgr": {
		"language": 6651
	},
	"tgs": {
		"language": 6652
	},
	"tgt": {
		"language": 6653
	},
	"tgu": {
		"language": 6654
	},
	"tgv": {
		"language": 6655
	},
	"tgw": {
		"language": 6656
	},
	"tgx": {
		"language": 6657
	},
	"tgy": {
		"language": 6658
	},
	"tgz": {
		"language": 6659
	},
	"thc": {
		"language": 6660
	},
	"thd": {
		"language": 6661
	},
	"the": {
		"language": 6662
	},
	"thf": {
		"language": 6663
	},
	"thh": {
		"language": 6664
	},
	"thi": {
		"language": 6665
	},
	"thk": {
		"language": 6666
	},
	"thl": {
		"language": 6667
	},
	"thm": {
		"language": 6668
	},
	"thn": {
		"language": 6669
	},
	"thp": {
		"language": 6670
	},
	"thq": {
		"language": 6671
	},
	"thr": {
		"language": 6672
	},
	"ths": {
		"language": 6673
	},
	"tht": {
		"language": 6674
	},
	"thu": {
		"language": 6675
	},
	"thv": {
		"language": 6676
	},
	"thw": {
		"language": 6677
	},
	"thx": {
		"language": 6678
	},
	"thy": {
		"language": 6679
	},
	"thz": {
		"language": 6680
	},
	"tia": {
		"language": 6681
	},
	"tic": {
		"language": 6682
	},
	"tid": {
		"language": 6683
	},
	"tie": {
		"language": 6684
	},
	"tif": {
		"language": 6685
	},
	"tig": {
		"language": 6686
	},
	"tih": {
		"language": 6687
	},
	"tii": {
		"language": 6688
	},
	"tij": {
		"language": 6689
	},
	"tik": {
		"language": 6690
	},
	"til": {
		"language": 6691
	},
	"tim": {
		"language": 6692
	},
	"tin": {
		"language": 6693
	},
	"tio": {
		"language": 6694
	},
	"tip": {
		"language": 6695
	},
	"tiq": {
		"language": 6696
	},
	"tis": {
		"language": 6697
	},
	"tit": {
		"language": 6698
	},
	"tiu": {
		"language": 6699
	},
	"tiv": {
		"language": 6700
	},
	"tiw": {
		"language": 6701
	},
	"tix": {
		"language": 6702
	},
	"tiy": {
		"language": 6703
	},
	"tiz": {
		"language": 6704
	},
	"tja": {
		"language": 6705
	},
	"tjg": {
		"language": 6706
	},
	"tji": {
		"language": 6707
	},
	"tjj": {
		"language": 6708
	},
	"tjl": {
		"language": 6709
	},
	"tjm": {
		"language": 6710
	},
	"tjn": {
		"language": 6711
	},
	"tjo": {
		"language": 6712
	},
	"tjp": {
		"language": 6713
	},
	"tjs": {
		"language": 6714
	},
	"tju": {
		"language": 6715
	},
	"tjw": {
		"language": 6716
	},
	"tka": {
		"language": 6717
	},
	"tkb": {
		"language": 6718
	},
	"tkd": {
		"language": 6719
	},
	"tke": {
		"language": 6720
	},
	"tkf": {
		"language": 6721
	},
	"tkg": {
		"language": 6722
	},
	"tkk": {
		"language": 6723
	},
	"tkl": {
		"language": 6724
	},
	"tkm": {
		"language": 6725
	},
	"tkn": {
		"language": 6726
	},
	"tkp": {
		"language": 6727
	},
	"tkq": {
		"language": 6728
	},
	"tkr": {
		"language": 6729
	},
	"tks": {
		"language": 6730
	},
	"tkt": {
		"language": 6731
	},
	"tku": {
		"language": 6732
	},
	"tkv": {
		"language": 6733
	},
	"tkw": {
		"language": 6734
	},
	"tkx": {
		"language": 6735
	},
	"tkz": {
		"language": 6736
	},
	"tla": {
		"language": 6737
	},
	"tlb": {
		"language": 6738
	},
	"tlc": {
		"language": 6739
	},
	"tld": {
		"language": 6740
	},
	"tlf": {
		"language": 6741
	},
	"tlg": {
		"language": 6742
	},
	"tlh": {
		"language": 6743
	},
	"tli": {
		"language": 6744
	},
	"tlj": {
		"language": 6745
	},
	"tlk": {
		"language": 6746
	},
	"tll": {
		"language": 6747
	},
	"tlm": {
		"language": 6748
	},
	"tln": {
		"language": 6749
	},
	"tlo": {
		"language": 6750
	},
	"tlp": {
		"language": 6751
	},
	"tlq": {
		"language": 6752
	},
	"tlr": {
		"language": 6753
	},
	"tls": {
		"language": 6754
	},
	"tlt": {
		"language": 6755
	},
	"tlu": {
		"language": 6756
	},
	"tlv": {
		"language": 6757
	},
	"tlw": {
		"language": 6758
	},
	"tlx": {
		"language": 6759
	},
	"tly": {
		"language": 6760
	},
	"tma": {
		"language": 6761
	},
	"tmb": {
		"language": 6762
	},
	"tmc": {
		"language": 6763
	},
	"tmd": {
		"language": 6764
	},
	"tme": {
		"language": 6765
	},
	"tmf": {
		"language": 6766
	},
	"tmg": {
		"language": 6767
	},
	"tmh": {
		"language": 6768
	},
	"tmi": {
		"language": 6769
	},
	"tmj": {
		"language": 6770
	},
	"tmk": {
		"language": 6771
	},
	"tml": {
		"language": 6772
	},
	"tmm": {
		"language": 6773
	},
	"tmn": {
		"language": 6774
	},
	"tmo": {
		"language": 6775
	},
	"tmp": {
		"language": 6776
	},
	"tmq": {
		"language": 6777
	},
	"tmr": {
		"language": 6778
	},
	"tms": {
		"language": 6779
	},
	"tmt": {
		"language": 6780
	},
	"tmu": {
		"language": 6781
	},
	"tmv": {
		"language": 6782
	},
	"tmw": {
		"language": 6783,
		"extlang": 8479
	},
	"tmy": {
		"language": 6784
	},
	"tmz": {
		"language": 6785
	},
	"tna": {
		"language": 6786
	},
	"tnb": {
		"language": 6787
	},
	"tnc": {
		"language": 6788
	},
	"tnd": {
		"language": 6789
	},
	"tne": {
		"language": 6790
	},
	"tnf": {
		"language": 6791
	},
	"tng": {
		"language": 6792
	},
	"tnh": {
		"language": 6793
	},
	"tni": {
		"language": 6794
	},
	"tnk": {
		"language": 6795
	},
	"tnl": {
		"language": 6796
	},
	"tnm": {
		"language": 6797
	},
	"tnn": {
		"language": 6798
	},
	"tno": {
		"language": 6799
	},
	"tnp": {
		"language": 6800
	},
	"tnq": {
		"language": 6801
	},
	"tnr": {
		"language": 6802
	},
	"tns": {
		"language": 6803
	},
	"tnt": {
		"language": 6804
	},
	"tnu": {
		"language": 6805
	},
	"tnv": {
		"language": 6806
	},
	"tnw": {
		"language": 6807
	},
	"tnx": {
		"language": 6808
	},
	"tny": {
		"language": 6809
	},
	"tnz": {
		"language": 6810
	},
	"tob": {
		"language": 6811
	},
	"toc": {
		"language": 6812
	},
	"tod": {
		"language": 6813
	},
	"toe": {
		"language": 6814
	},
	"tof": {
		"language": 6815
	},
	"tog": {
		"language": 6816
	},
	"toh": {
		"language": 6817
	},
	"toi": {
		"language": 6818
	},
	"toj": {
		"language": 6819
	},
	"tok": {
		"language": 6820
	},
	"tol": {
		"language": 6821
	},
	"tom": {
		"language": 6822
	},
	"too": {
		"language": 6823
	},
	"top": {
		"language": 6824
	},
	"toq": {
		"language": 6825
	},
	"tor": {
		"language": 6826
	},
	"tos": {
		"language": 6827
	},
	"tou": {
		"language": 6828
	},
	"tov": {
		"language": 6829
	},
	"tow": {
		"language": 6830
	},
	"tox": {
		"language": 6831
	},
	"toy": {
		"language": 6832
	},
	"toz": {
		"language": 6833
	},
	"tpa": {
		"language": 6834
	},
	"tpc": {
		"language": 6835
	},
	"tpe": {
		"language": 6836
	},
	"tpf": {
		"language": 6837
	},
	"tpg": {
		"language": 6838
	},
	"tpi": {
		"language": 6839
	},
	"tpj": {
		"language": 6840
	},
	"tpk": {
		"language": 6841
	},
	"tpl": {
		"language": 6842
	},
	"tpm": {
		"language": 6843
	},
	"tpn": {
		"language": 6844
	},
	"tpo": {
		"language": 6845
	},
	"tpp": {
		"language": 6846
	},
	"tpq": {
		"language": 6847
	},
	"tpr": {
		"language": 6848
	},
	"tpt": {
		"language": 6849
	},
	"tpu": {
		"language": 6850
	},
	"tpv": {
		"language": 6851
	},
	"tpw": {
		"language": 6852
	},
	"tpx": {
		"language": 6853
	},
	"tpy": {
		"language": 6854
	},
	"tpz": {
		"language": 6855
	},
	"tqb": {
		"language": 6856
	},
	"tql": {
		"language": 6857
	},
	"tqm": {
		"language": 6858
	},
	"tqn": {
		"language": 6859
	},
	"tqo": {
		"language": 6860
	},
	"tqp": {
		"language": 6861
	},
	"tqq": {
		"language": 6862
	},
	"tqr": {
		"language": 6863
	},
	"tqt": {
		"language": 6864
	},
	"tqu": {
		"language": 6865
	},
	"tqw": {
		"language": 6866
	},
	"tra": {
		"language": 6867
	},
	"trb": {
		"language": 6868
	},
	"trc": {
		"language": 6869
	},
	"trd": {
		"language": 6870
	},
	"tre": {
		"language": 6871
	},
	"trf": {
		"language": 6872
	},
	"trg": {
		"language": 6873
	},
	"trh": {
		"language": 6874
	},
	"tri": {
		"language": 6875
	},
	"trj": {
		"language": 6876
	},
	"trk": {
		"language": 6877
	},
	"trl": {
		"language": 6878
	},
	"trm": {
		"language": 6879
	},
	"trn": {
		"language": 6880
	},
	"tro": {
		"language": 6881
	},
	"trp": {
		"language": 6882
	},
	"trq": {
		"language": 6883
	},
	"trr": {
		"language": 6884
	},
	"trs": {
		"language": 6885
	},
	"trt": {
		"language": 6886
	},
	"tru": {
		"language": 6887
	},
	"trv": {
		"language": 6888
	},
	"trw": {
		"language": 6889
	},
	"trx": {
		"language": 6890
	},
	"try": {
		"language": 6891
	},
	"trz": {
		"language": 6892
	},
	"tsa": {
		"language": 6893
	},
	"tsb": {
		"language": 6894
	},
	"tsc": {
		"language": 6895
	},
	"tsd": {
		"language": 6896
	},
	"tse": {
		"language": 6897,
		"extlang": 8480
	},
	"tsf": {
		"language": 6898
	},
	"tsg": {
		"language": 6899
	},
	"tsh": {
		"language": 6900
	},
	"tsi": {
		"language": 6901
	},
	"tsj": {
		"language": 6902
	},
	"tsk": {
		"language": 6903
	},
	"tsl": {
		"language": 6904
	},
	"tsm": {
		"language": 6905,
		"extlang": 8481
	},
	"tsp": {
		"language": 6906
	},
	"tsq": {
		"language": 6907,
		"extlang": 8482
	},
	"tsr": {
		"language": 6908
	},
	"tss": {
		"language": 6909,
		"extlang": 8483
	},
	"tst": {
		"language": 6910
	},
	"tsu": {
		"language": 6911
	},
	"tsv": {
		"language": 6912
	},
	"tsw": {
		"language": 6913
	},
	"tsx": {
		"language": 6914
	},
	"tsy": {
		"language": 6915,
		"extlang": 8484
	},
	"tsz": {
		"language": 6916
	},
	"tta": {
		"language": 6917
	},
	"ttb": {
		"language": 6918
	},
	"ttc": {
		"language": 6919
	},
	"ttd": {
		"language": 6920
	},
	"tte": {
		"language": 6921
	},
	"ttf": {
		"language": 6922
	},
	"ttg": {
		"language": 6923
	},
	"tth": {
		"language": 6924
	},
	"tti": {
		"language": 6925
	},
	"ttj": {
		"language": 6926
	},
	"ttk": {
		"language": 6927
	},
	"ttl": {
		"language": 6928
	},
	"ttm": {
		"language": 6929
	},
	"ttn": {
		"language": 6930
	},
	"tto": {
		"language": 6931
	},
	"ttp": {
		"language": 6932
	},
	"ttq": {
		"language": 6933
	},
	"ttr": {
		"language": 6934
	},
	"tts": {
		"language": 6935
	},
	"ttt": {
		"language": 6936
	},
	"ttu": {
		"language": 6937
	},
	"ttv": {
		"language": 6938
	},
	"ttw": {
		"language": 6939
	},
	"tty": {
		"language": 6940
	},
	"ttz": {
		"language": 6941
	},
	"tua": {
		"language": 6942
	},
	"tub": {
		"language": 6943
	},
	"tuc": {
		"language": 6944
	},
	"tud": {
		"language": 6945
	},
	"tue": {
		"language": 6946
	},
	"tuf": {
		"language": 6947
	},
	"tug": {
		"language": 6948
	},
	"tuh": {
		"language": 6949
	},
	"tui": {
		"language": 6950
	},
	"tuj": {
		"language": 6951
	},
	"tul": {
		"language": 6952
	},
	"tum": {
		"language": 6953
	},
	"tun": {
		"language": 6954
	},
	"tuo": {
		"language": 6955
	},
	"tup": {
		"language": 6956
	},
	"tuq": {
		"language": 6957
	},
	"tus": {
		"language": 6958
	},
	"tut": {
		"language": 6959
	},
	"tuu": {
		"language": 6960
	},
	"tuv": {
		"language": 6961
	},
	"tuw": {
		"language": 6962
	},
	"tux": {
		"language": 6963
	},
	"tuy": {
		"language": 6964
	},
	"tuz": {
		"language": 6965
	},
	"tva": {
		"language": 6966
	},
	"tvd": {
		"language": 6967
	},
	"tve": {
		"language": 6968
	},
	"tvi": {
		"language": 6969
	},
	"tvk": {
		"language": 6970
	},
	"tvl": {
		"language": 6971
	},
	"tvm": {
		"language": 6972
	},
	"tvn": {
		"language": 6973
	},
	"tvo": {
		"language": 6974
	},
	"tvs": {
		"language": 6975
	},
	"tvt": {
		"language": 6976
	},
	"tvu": {
		"language": 6977
	},
	"tvw": {
		"language": 6978
	},
	"tvx": {
		"language": 6979
	},
	"tvy": {
		"language": 6980
	},
	"twa": {
		"language": 6981
	},
	"twb": {
		"language": 6982
	},
	"twc": {
		"language": 6983
	},
	"twd": {
		"language": 6984
	},
	"twe": {
		"language": 6985
	},
	"twf": {
		"language": 6986
	},
	"twg": {
		"language": 6987
	},
	"twh": {
		"language": 6988
	},
	"twl": {
		"language": 6989
	},
	"twm": {
		"language": 6990
	},
	"twn": {
		"language": 6991
	},
	"two": {
		"language": 6992
	},
	"twp": {
		"language": 6993
	},
	"twq": {
		"language": 6994
	},
	"twr": {
		"language": 6995
	},
	"twt": {
		"language": 6996
	},
	"twu": {
		"language": 6997
	},
	"tww": {
		"language": 6998
	},
	"twx": {
		"language": 6999
	},
	"twy": {
		"language": 7000
	},
	"txa": {
		"language": 7001
	},
	"txb": {
		"language": 7002
	},
	"txc": {
		"language": 7003
	},
	"txe": {
		"language": 7004
	},
	"txg": {
		"language": 7005
	},
	"txh": {
		"language": 7006
	},
	"txi": {
		"language": 7007
	},
	"txj": {
		"language": 7008
	},
	"txm": {
		"language": 7009
	},
	"txn": {
		"language": 7010
	},
	"txo": {
		"language": 7011
	},
	"txq": {
		"language": 7012
	},
	"txr": {
		"language": 7013
	},
	"txs": {
		"language": 7014
	},
	"txt": {
		"language": 7015
	},
	"txu": {
		"language": 7016
	},
	"txx": {
		"language": 7017
	},
	"txy": {
		"language": 7018
	},
	"tya": {
		"language": 7019
	},
	"tye": {
		"language": 7020
	},
	"tyh": {
		"language": 7021
	},
	"tyi": {
		"language": 7022
	},
	"tyj": {
		"language": 7023
	},
	"tyl": {
		"language": 7024
	},
	"tyn": {
		"language": 7025
	},
	"typ": {
		"language": 7026
	},
	"tyr": {
		"language": 7027
	},
	"tys": {
		"language": 7028
	},
	"tyt": {
		"language": 7029
	},
	"tyu": {
		"language": 7030
	},
	"tyv": {
		"language": 7031
	},
	"tyx": {
		"language": 7032
	},
	"tyy": {
		"language": 7033
	},
	/**
 * @fileoverview Forbid "button" element without an explicit "type" attribute
 * @author Filipp Riabchun
 */

'use strict';

const getProp = require('jsx-ast-utils/getProp');
const getLiteralPropValue = require('jsx-ast-utils/getLiteralPropValue');
const docsUrl = require('../util/docsUrl');
const isCreateElement = require('../util/isCreateElement');
const report = require('../util/report');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

const optionDefaults = {
  button: true,
  submit: true,
  reset: true,
};

const messages = {
  missingType: 'Missing an explicit type attribute for button',
  complexType: 'The button type attribute must be specified by a static string or a trivial ternary expression',
  invalidValue: '"{{value}}" is an invalid value for button type attribute',
  forbiddenValue: '"{{value}}" is an invalid value for button type attribute',
};

/** @type {import('eslint').Rule.RuleModule} */
module.exports = {
  meta: {
    docs: {
      description: 'Disallow usage of `button` elements without an explicit `type` attribute',
      category: 'Possible Errors',
      recommended: false,
      url: docsUrl('button-has-type'),
    },

    messages,

    schema: [{
      type: 'object',
      properties: {
        button: {
          default: optionDefaults.button,
          type: 'boolean',
        },
        submit: {
          default: optionDefaults.submit,
          type: 'boolean',
        },
        reset: {
          default: optionDefaults.reset,
          type: 'boolean',
        },
      },
      additionalProperties: false,
    }],
  },

  create(context) {
    const configuration = Object.assign({}, optionDefaults, context.options[0]);

    function reportMissing(node) {
      report(context, messages.missingType, 'missingType', {
        node,
      });
    }

    function reportComplex(node) {
      report(context, messages.complexType, 'complexType', {
        node,
      });
    }

    function checkValue(node, value) {
      if (!(value in configuration)) {
        report(context, messages.invalidValue, 'invalidValue', {
          node,
          data: {
            value,
          },
        });
      } else if (!configuration[value]) {
        report(context, messages.forbiddenValue, 'forbiddenValue', {
          node,
          data: {
            value,
          },
        });
      }
    }

    function checkExpression(node, expression) {
      switch (expression.type) {
        case 'Literal':
          checkValue(node, expression.value);
          return;
        case 'TemplateLiteral':
          if (expression.expressions.length === 0) {
            checkValue(node, expression.quasis[0].value.raw);
          } else {
            reportComplex(expression);
          }
          return;
        case 'ConditionalExpression':
          checkExpression(node, expression.consequent);
          checkExpression(node, expression.alternate);
          return;
        default:
          reportComplex(expression);
      }
    }

    return {
      JSXElement(node) {
        if (node.openingElement.name.name !== 'button') {
          return;
        }

        const typeProp = getProp(node.openingElement.attributes, 'type');

        if (!typeProp) {
          reportMissing(node);
          return;
        }

        if (typeProp.value && typeProp.value.type === 'JSXExpressionContainer') {
          checkExpression(node, typeProp.value.expression);
          return;
        }

        const propValue = getLiteralPropValue(typeProp);
        checkValue(node, propValue);
      },
      CallExpression(node) {
        if (!isCreateElement(context, node) || node.arguments.length < 1) {
          return;
        }

        if (node.arguments[0].type !== 'Literal' || node.arguments[0].value !== 'button') {
          return;
        }

        if (!node.arguments[1] || node.arguments[1].type !== 'ObjectExpression') {
          reportMissing(node);
          returnimport fs from 'node:fs';
import path from 'node:path';
import isNodeCoreModule from '@nolyfill/is-core-module';
import debug from 'debug';
import enhancedResolve from 'enhanced-resolve';
import fg from 'fast-glob';
import { getTsconfig, createPathsMatcher } from 'get-tsconfig';
import { isBunModule } from 'is-bun-module';
import isGlob from 'is-glob';
import stableHashExports from 'stable-hash';

const { globSync } = fg;
const stableHash = stableHashExports.default || stableHashExports;
const IMPORTER_NAME = "eslint-import-resolver-typescript";
const log = debug(IMPORTER_NAME);
const defaultConditionNames = [
  "types",
  "import",
  // APF: https://angular.io/guide/angular-package-format
  "esm2020",
  "es2020",
  "es2015",
  "require",
  "node",
  "node-addons",
  "browser",
  "default"
];
const defaultExtensions = [
  ".ts",
  ".tsx",
  ".d.ts",
  ".js",
  ".jsx",
  ".json",
  ".node"
];
const defaultExtensionAlias = {
  ".js": [
    ".ts",
    // `.tsx` can also be compiled as `.js`
    ".tsx",
    ".d.ts",
    ".js"
  ],
  ".jsx": [".tsx", ".d.ts", ".jsx"],
  ".cjs": [".cts", ".d.cts", ".cjs"],
  ".mjs": [".mts", ".d.mts", ".mjs"]
};
const defaultMainFields = [
  "types",
  "typings",
  // APF: https://angular.io/guide/angular-package-format
  "fesm2020",
  "fesm2015",
  "esm2020",
  "es2020",
  "module",
  "jsnext:main",
  "main"
];
const interfaceVersion = 2;
const fileSystem = fs;
const JS_EXT_PATTERN = /\.(?:[cm]js|jsx?)$/;
const RELATIVE_PATH_PATTERN = /^\.{1,2}(?:\/.*)?$/;
let previousOptionsHash;
let optionsHash;
let cachedOptions;
let prevCwd;
let mappersCachedOptions;
let mappers;
let resolverCachedOptions;
let cachedResolver;
function resolve(source, file, options, resolver = null) {
  if (!cachedOptions || previousOptionsHash !== (optionsHash = stableHash(options))) {
    previousOptionsHash = optionsHash;
    cachedOptions = {
      ...options,
      conditionNames: options?.conditionNames ?? defaultConditionNames,
      extensions: options?.extensions ?? defaultExtensions,
      extensionAlias: options?.extensionAlias ?? defaultExtensionAlias,
      mainFields: options?.mainFields ?? defaultMainFields,
      fileSystem: new enhancedResolve.CachedInputFileSystem(
        fileSystem,
        5 * 1e3
      ),
      useSyncFileSystemCalls: true
    };
  }
  if (!resolver) {
    if (!cachedResolver || resolverCachedOptions !== cachedOptions) {
      cachedResolver = enhancedResolve.ResolverFactory.createResolver(cachedOptions);
      resolverCachedOptions = cachedOptions;
    }
    resolver = cachedResolver;
  }
  log("looking for:", source);
  source = removeQuerystring(source);
  if (isNodeCoreModule(source) || isBunModule(source, process.versions.bun ?? "latest")) {
    log("matched core:", source);
    return {
      found: true,
      path: null
    };
  }
  initMappers(cachedOptions);
  const mappedPath = getMappedPath(source, file, cachedOptions.extensions, true);
  if (mappedPath) {
    log("matched ts path:", mappedPath);
  }
  let foundNodePath;
  try {
    foundNodePath = resolver.resolveSync(
      {},
      path.dirname(path.resolve(file)),
      mappedPath ?? source
    ) || null;
  } catch {
    foundNodePath = null;
  }
  if ((JS_EXT_PATTERN.test(foundNodePath) || cachedOptions.alwaysTryTypes && !foundNodePath) && !/^@types[/\\]/.test(source) && !path.isAbsolute(source) && !source.startsWith(".")) {
    const definitelyTyped = resolve(
      "@types" + path.sep + mangleScopedPackage(source),
      file,
      options
    );
    if (definitelyTyped.found) {
      return definitelyTyped;
    }
  }
  if (foundNodePath) {
    log("matched node path:", foundNodePath);
    return {
      found: true,
      path: foundNodePath
    };
  }
  log("didn't find ", source);
  return {
    found: false
  };
}
function createTypeScriptImportResolver(options) {
  const resolver = enhancedResolve.ResolverFactory.createResolver({
    ...options,
    conditionNames: options?.conditionNames ?? defaultConditionNames,
    extensions: options?.extensions ?? defaultExtensions,
    extensionAlias: options?.extension;
        }

        const props = node.arguments[1].properties;
        const typeProp = props.find((prop) => (
          'key' in prop
          && prop.key
          && 'name' in prop.key
          && prop.key.name === 'type'
        ));

        if (!typeProp) {
          reportMissing(node);
          return;
        }

        checkExpression(node, 'value' in typeProp ? typeProp.value : undefined);
      },
    };
  },
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Alias ?? defaultExtensionAlias,
    mainFields: options?.mainFields ?? defaultMainFields,
    fileSystem: new enhancedResolve.CachedInputFileSystem(fileSystem, 5 * 1e3),
    useSyncFileSystemCalls: true
  });
  return {
    interfaceVersion: 3,
    name: IMPORTER_NAME,
    resolve(source, file) {
      return resolve(source, file, options, resolver);
    }
  };
}
function removeQuerystring(id) {
  const querystringIndex = id.lastIndexOf("?");
  if (querystringIndex >= 0) {
    return id.slice(0, querystringIndex);
  }
  return id;
}
const isFile = (path2) => {
  try {
    return !!(path2 && fs.statSync(path2, { throwIfNoEntry: false })?.isFile());
  } catch {
    return false;
  }
};
const isModule = (modulePath) => {
  return !!modulePath && isFile(path.resolve(modulePath, "package.json"));
};
function getMappedPath(source, file, extensions = defaultExtensions, retry) {
  const originalExtensions = extensions;
  extensions = ["", ...extensions];
  let paths = [];
  if (RELATIVE_PATH_PATTERN.test(source)) {
    const resolved = path.resolve(path.dirname(file), source);
    if (isFile(resolved)) {
      paths = [resolved];
    }
  } else {
    paths = mappers.map(
      (mapper) => mapper?.(source).map((item) => [
        ...extensions.map((ext) => `${item}${ext}`),
        ...originalExtensions.map((ext) => `${item}/index${ext}`)
      ])
    ).flat(2).filter((mappedPath) => {
      if (mappedPath === void 0) {
        return false;
      }
      try {
        const stat = fs.statSync(mappedPath, { throwIfNoEntry: false });
        if (stat === void 0)
          return false;
        if (stat.isFile())
          return true;
        if (stat.isDirectory()) {
          return isModule(mappedPath);
        }
      } catch {
        return false;
      }
      return false;
    });
  }
  if (retry && paths.length === 0) {
    const isJs = JS_EXT_PATTERN.test(source);
    if (isJs) {
      const jsExt = path.extname(source);
      const tsExt = jsExt.replace("js", "ts");
      const basename = source.replace(JS_EXT_PATTERN, "");
      const resolved = getMappedPath(basename + tsExt, file) || getMappedPath(
        basename + ".d" + (tsExt === ".tsx" ? ".ts" : tsExt),
        file
      );
      if (resolved) {
        return resolved;
      }
    }
    for (const ext of extensions) {
      const resolved = (isJs ? null : getMappedPath(source + ext, file)) || getMappedPath(source + `/index${ext}`, file);
      if (resolved) {
        return resolved;
      }
    }
  }
  if (paths.length > 1) {
    log("found multiple matching ts paths:", paths);
  }
  return paths[0];
}
function initMappers(options) {
  if (mappers && mappersCachedOptions === options && prevCwd === process.cwd()) {
    return;
  }
  prevCwd = process.cwd();
  const configPaths = typeof options.project === "string" ? [options.project] : Array.isArray(options.project) ? options.project : [process.cwd()];
  const ignore = ["!**/node_modules/**"];
  const projectPaths = [
    .../* @__PURE__ */ new Set([
      ...configPaths.filter((path2) => !isGlob(path2)),
      ...globSync([...configPaths.filter((path2) => isGlob(path2)), ...ignore])
    ])
  ];
  mappers = projectPaths.map((projectPath) => {
    let tsconfigResult;
    if (isFile(projectPath)) {
      const { dir, base } = path.parse(projectPath);
      tsconfigResult = getTsconfig(dir, base);
    } else {
      tsconfigResult = getTsconfig(projectPath);
    }
    return tsconfigResult && createPathsMatcher(tsconfigResult);
  });
  mappersCachedOptions = options;
}
function mangleScopedPackage(moduleName) {
  if (moduleName.startsWith("@")) {
    const replaceSlash = moduleName.replace(path.sep, "__");
    if (replaceSlash !== moduleName) {
      return replaceSlash.slice(1);
    }
  }
  return moduleName;
}

export { createTypeScriptImportResolver, defaultConditionNames, defaultExtensionAlias, defaultExtensions, defaultMainFields, interfaceVersion, resolve };
                                                                                                                                                      - default: ' '
* `descriptionSeparator` is an optional string , separates the description from the padded name and type - default: '  '
* `initialIndent` is an optional int - the amount of indent for options - default: 2
* `secondaryIndent` is an optional int - the amount of indent if wrapped fully (in addition to the initial indent) - default: 4
* `maxPadFactor` is an optional number - affects the default level of padding for the names/type, it is multiplied by the average of the length of the names/type - default: 1.5

## Argument Format
At the highest level there are two types of arguments: named, and positional.

Name arguments of any length are prefixed with `--` (eg. `--go`), and those of one character may be prefixed with either `--` or `-` (eg. `-g`).

There are two types of named arguments: boolean flags (eg. `--problemo`, `-p`) which take no value and result in a `true` if they are present, the falsey `undefined` if they are not present, or `false` if present and explicitly prefixed with `no` (eg. `--no-problemo`). Named arguments with values (eg. `--tseries 800`, `-t 800`) are the other type. If the option has a type `Boolean` it will automatically be made into a boolean flag. Any other type results in a named argument that takes a value.

For more information about how to properly set types to get the value you want, take a look at the [type check](https://github.com/gkz/type-check) and [levn](https://github.com/gkz/levn) pages.

You can group single character arguments that use a single `-`, however all except the last must be boolean flags (which take no value). The last may be a boolean flag, or an argument which takes a value - eg. `-ba 2` is equivalent to `-b -a 2`.

Positional arguments are all those values which do not fall under the above - they can be anywhere, not just at the end. For example, in `cmd -b one -a 2 two` where `b` is a boolean flag, and `a` has the type `Number`, there are two positional arguments, `one` and `two`.

Everything after an `--` is positional, even if it looks like a named argument.

You may optionally use `=` to separate option names from values, for example: `--count=2`.

If you specify the option `NUM`, then any argument using a single `-` followed by a number will be valid and will set the value of `NUM`. Eg. `-2` will be parsed into `NUM: 2`.

If duplicate named arguments are present, the last one will be taken.

## Technical About
`optionator` is written in [LiveScript](http://livescript.net/) - a language that compiles to JavaScript. It uses [levn](https://github.com/gkz/levn) to cast arguments to their specified type, and uses [type-check](https://github.com/gkz/type-check) to validate values. It also uses the [prelude.ls](http://preludels.com/) library.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         {
  "name": "@eslint/plugin-kit",
  "version": "0.2.5",
  "description": "Utilities for building ESLint plugins.",
  "author": "Nicholas C. Zakas",
  "type": "module",
  "main": "dist/esm/index.js",
  "types": "dist/esm/index.d.ts",
  "exports": {
    "require": {
      "types": "./dist/cjs/index.d.cts",
      "default": "./dist/cjs/index.cjs"
    },
    "import": {
      "types": "./dist/esm/index.d.ts",
      "default": "./dist/esm/index.js"
    }
  },
  "files": [
    "dist"
  ],
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/eslint/rewrite.git"
  },
  "bugs": {
    "url": "https://github.com/eslint/rewrite/issues"
  },
  "homepage": "https://github.com/eslint/rewrite#readme",
  "scripts": {
    "build:dedupe-types": "node ../../tools/dedupe-types.js dist/cjs/index.cjs dist/esm/index.js",
    "build:cts": "node ./build-cts.js",
    "build": "rollup -c && npm run build:dedupe-types && tsc -p tsconfig.esm.json && npm run build:cts",
    "pretest": "npm run build",
    "test": "mocha tests/",
    "test:coverage": "c8 npm test",
    "test:jsr": "npx jsr@latest publish --dry-run",
    "test:types": "tsc -p tests/types/tsconfig.json"
  },
  "keywords": [
    "eslint",
    "eslintplugin",
    "eslint-plugin"
  ],
  "license": "Apache-2.0",
  "dependencies": {
    "@eslint/core": "^0.10.0",
    "levn": "^0.4.1"
  },
  "devDependencies": {
    "@types/levn": "^0.4.0",
    "c8": "^9.1.0",
    "mocha": "^10.4.0",
    "rollup": "^4.16.2",
    "rollup-plugin-copy": "^3.5.0",
    "typescript": "^5.4.5"
  },
  "engines": {
    "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
  }
}
                                                                                                                                                 